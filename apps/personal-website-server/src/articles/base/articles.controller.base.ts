/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ArticlesService } from "../articles.service";
import { ArticlesCreateInput } from "./ArticlesCreateInput";
import { Articles } from "./Articles";
import { ArticlesFindManyArgs } from "./ArticlesFindManyArgs";
import { ArticlesWhereUniqueInput } from "./ArticlesWhereUniqueInput";
import { ArticlesUpdateInput } from "./ArticlesUpdateInput";

export class ArticlesControllerBase {
  constructor(protected readonly service: ArticlesService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Articles })
  async createArticles(
    @common.Body() data: ArticlesCreateInput
  ): Promise<Articles> {
    return await this.service.createArticles({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Articles] })
  @ApiNestedQuery(ArticlesFindManyArgs)
  async articlesItems(@common.Req() request: Request): Promise<Articles[]> {
    const args = plainToClass(ArticlesFindManyArgs, request.query);
    return this.service.articlesItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Articles })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async articles(
    @common.Param() params: ArticlesWhereUniqueInput
  ): Promise<Articles | null> {
    const result = await this.service.articles({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Articles })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateArticles(
    @common.Param() params: ArticlesWhereUniqueInput,
    @common.Body() data: ArticlesUpdateInput
  ): Promise<Articles | null> {
    try {
      return await this.service.updateArticles({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Articles })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteArticles(
    @common.Param() params: ArticlesWhereUniqueInput
  ): Promise<Articles | null> {
    try {
      return await this.service.deleteArticles({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
